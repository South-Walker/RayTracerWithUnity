// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159f;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float2 _PixelOffset;
//平行光
float4 _DirectionalLight;

struct Ray
{
	float3 origin;
	float3 direction;
	float3 energy;
};
struct RayHit
{
	float3 position;
	float distance;
	float3 normal;
	float3 albedo;
	float3 specular;
};
struct Sphere
{
	float3 position;
	float radius;
	//漫反射光，影响漫反射程度
	float3 albedo;
	//反射一次的能量损失，影响镜面反射程度
	float3 specular;
};
StructuredBuffer<Sphere> _Spheres;
RayHit CreateRayHit()
{
	RayHit hit;
	hit.position = float3(0.0f, 0.0f, 0.0f);
	hit.distance = 1.#INF;
	hit.normal = float3(0.0f, 0.0f, 0.0f);
	hit.albedo = float3(0.0f, 0.0f, 0.0f);
	hit.specular = float3(0.0f, 0.0f, 0.0f);
	return hit;
}
Ray CreateRay(float3 origin, float3 direction)
{
	Ray ray;
	ray.origin = origin;
	ray.direction = direction;
	ray.energy = float3(1.0f, 1.0f, 1.0f);
	return ray;
}
Ray CreateCameraRay(float2 uv)
{
	float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
	float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
	direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);
	return CreateRay(origin, direction);
}
//地平线位于0.0
void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
	float t = -ray.origin.y / ray.direction.y;
	if (t > 0 && t < bestHit.distance)
	{
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = float3(0.0f, 1.0f, 0.0f);
		bestHit.albedo = float3(0.5f, 0.5f, 0.5f);
		bestHit.specular = float3(0.5f, 0.5f, 0.5f);
	}
}
void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
	//直线与圆交点算法，direction为单位向量，sphere前三维为圆心坐标，第四维为半径
	float3 d = ray.origin - sphere.position;
	//p1是d在direction方向上的投影，p1,d,直线与圆的距离构成直角三角形
	float p1 = -dot(ray.direction, d);
	//直线与圆的距离b刚好等于为半径时，p2sqr等于0，由此判断b与半径的相对大小
	float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
	if (p2sqr < 0)
		return;
	//p2sqr在数值上等于r^2-b^2,由勾股定理等于直线在圆内长度的一半的平方
	float p2 = sqrt(p2sqr);
	float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
	if (t > 0 && t < bestHit.distance)
	{
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = normalize(bestHit.position - sphere.position);
		bestHit.albedo = sphere.albedo;
		bestHit.specular = sphere.specular;
	}
}
RayHit Trace(Ray ray)
{
	uint numSpheres = 100;
	uint stride = 40;
	//从传递的缓存中读取需要的球体信息
	_Spheres.GetDimensions(numSpheres, stride);
	RayHit bestHit = CreateRayHit();
	IntersectGroundPlane(ray, bestHit);
	for (int i = 0; i < numSpheres; i++)
	{
		IntersectSphere(ray, bestHit, _Spheres[i]);
	}
	return bestHit;
}
float3 Shade(inout Ray ray, RayHit hit)
{
	if (hit.distance < 1.#INF)
	{
		//由于浮点数不精确，沿法线偏移一点点距离
		ray.origin = hit.position + hit.normal * 0.001f;
		ray.direction = reflect(ray.direction, hit.normal);
		ray.energy *= hit.specular;

		bool shadow = false;
		Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
		RayHit shadowHit = Trace(shadowRay);
		if (shadowHit.distance != 1.#INF)
		{
			return float3(0.0f, 0.0f, 0.0f);
		}
		return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * hit.albedo;
	}
	else
	{
		ray.energy = 0.0f;
		//directX y轴反向
		float theta = 1 - acos(ray.direction.y) / PI;
		//把垂直于z轴的近裁剪平面对应的背景由贴图边缘变换到贴图中央
		float phi = (atan2(ray.direction.x, ray.direction.z) / PI * 0.5f + 0.5) % 1;
		//mipmap算法，最后的0表示用最大的一张，细节最丰富的一张采样
		//使用samplerstate将采样与纹理分离
		return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
	}
}
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint width, height;
	Result.GetDimensions(width, height);
	float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);
	Ray ray = CreateCameraRay(uv);

	float3 result = float3(0, 0, 0);
	for (int i = 0; i < 8; i++)
	{
		RayHit hit = Trace(ray);
		result += ray.energy * Shade(ray, hit);
		if (!any(ray.energy))
		{
			break;
		}
	}
	Result[id.xy] = float4(result, 1);
}
