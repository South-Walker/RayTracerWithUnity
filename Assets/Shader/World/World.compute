#ifndef WORLD
#define WORLD
#include "/GeometricObjects/Hitable.compute"
#include "Ray.compute"
#include "Utilitie.compute"
StructuredBuffer<Sphere> _Spheres;
uint SphereNum;
StructuredBuffer<Mesh> _Meshes;
uint MeshNum;
StructuredBuffer<PointLight> _PointLights;
uint PointLightNum;
StructuredBuffer<DirectionalLight> _DirectionalLights;
uint DirectionalLightNum;

Plane Ground;
SphereWithTexture Earth;


Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
struct World
{
	static void InitWorld()
	{
		uint temp;
		_Spheres.GetDimensions(SphereNum, temp);
		Sphere::Init();
		_Meshes.GetDimensions(MeshNum, temp);
		Mesh::Init();
		_PointLights.GetDimensions(PointLightNum, temp);
		PointLight::Init();
		_DirectionalLights.GetDimensions(DirectionalLightNum, temp);
		DirectionalLight::Init();

		Ground.height = 0.0f;
		Plane::Init();

		Earth.position = float3(0, 60, 0);
		Earth.radius = 50;
		SphereWithTexture::Init();
	}
	static RayHit Trace(Ray ray)
	{
		uint i;
		RayHit bestHit = RayHit::CreateRayHit();
		Ground.Hit(ray, bestHit);
		Earth.Hit(ray, bestHit);
		//传来的数据包含一个tail
		for (i = 1; i < SphereNum; i++)
		{
			_Spheres[i - 1].Hit(ray, bestHit);
		}
		for (i = 1; i < MeshNum; i++)
		{
			_Meshes[i - 1].Hit(ray, bestHit);
		}
		return bestHit;
	}
	static float3 HitSkyBox(float3 direction)
	{
		return 0.1f;
		//使用samplerstate将采样与纹理分离
		return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, GetUVOnSphere(direction), 0).xyz;
	}
	static float3 LightAt(float3 hitpoint, float3 direction)
	{
		uint i;
		float3 result = 0;
		float t = 1.#INF;
		Ray tolight = Ray::CreateRay(hitpoint, 0);
		PointLight nowpointlight;
		DirectionalLight nowdirlight;
		//传来的数据包含一个tail
		for (i = 1; i < PointLightNum; i++)
		{
			nowpointlight = _PointLights[i - 1];
			tolight.direction = nowpointlight.GetDirection(hitpoint);
			t = nowpointlight.GetHitTime(tolight);
			if (!IsHitBeforeT(tolight, t))
			{
				result += nowpointlight.color * nowpointlight.intensity * invPI * sdot(direction, tolight.direction);// / t / t;
			}
		}
		for (i = 1; i < DirectionalLightNum; i++)
		{
			nowdirlight = _DirectionalLights[i - 1];
			tolight.direction = nowdirlight.GetDirection(hitpoint);
			t = nowdirlight.GetHitTime(tolight);
			if (!IsHitBeforeT(tolight, t))
			{
				result += nowdirlight.color * nowdirlight.intensity * invPI * sdot(direction, tolight.direction);
			}
		}
		return result;
	}
	static bool IsHitBeforeT(Ray ray, float t)
	{
		uint i = 0;
		float temp = Ground.GetHitTime(ray);
		temp = min(temp, Earth.GetHitTime(ray));
		//传来的数据包含一个tail
		for (i = 1; i < SphereNum; i++)
		{
			temp = min(temp, _Spheres[i - 1].GetHitTime(ray));
		}
		for (i = 1; i < MeshNum; i++)
		{
			temp = min(temp, _Meshes[i - 1].GetHitTime(ray));
		}
		if (temp == 1.#INF)
			return false;
		if (temp + EPSILON < t)
			return true;
		return false;
	}
};

#endif