#ifndef UTILITIE
#define UTILITIE

#define PI 3.14159f
#define invPI 0.318310155f
#define EPSILON 1e-8

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

//获取切线空间转换矩阵
inline float3x3 GetTangentSpace(float3 normal)
{
	//保证二者叉积有非零值
	float3 helper = float3(1, 0, 0);
	if (abs(normal.x) > 0.99f)
		helper = float3(0, 0, 1);

	float3 tangent = normalize(cross(normal, helper));
	float3 binormal = normalize(cross(normal, tangent));
	return float3x3(tangent, binormal, normal);
}

inline float sdot(float3 x, float3 y, float f = 1.0f)
{
	return saturate(dot(x, y) * f);
}

inline float2 GetUVOnSphere(float3 pointonsphere)
{
	//原点左下角
	float theta = 1 - acos(pointonsphere.y) / PI;
	//把垂直于z轴的近裁剪平面对应的背景由贴图边缘变换到贴图中央
	float phi = (atan2(pointonsphere.x, -pointonsphere.z) / PI * 0.5f + 0.5) % 1;
	return float2(phi, theta);
}
inline float energy(float3 color)
{
	return dot(color, 1.0f / 3.0f);
}

//  a1
//   |\ 
//   | \
// u |ax\
//   |   \
//    ----
//  a0  v  a2 
inline float3 TriLinearInterpolation(float3 a0, float3 a1, float3 a2, float u, float v)
{
	return (1.0f - u) * (1.0f - v) * a0
		+ u * a1
		+ v * (1 - u) * a2;
}
#endif