#pragma kernel CSMain
#include "Utilitie.compute"
#include "Random.compute"
#include "Ray.compute"
#include "/World/World.compute"
#include "Camera.compute"


//hit.energy是辐射模型的迭代系数
//返回值是自发光强度
float3 Shade(inout Ray ray, RayHit hit)
{
	if (hit.distance < 1.#INF)
	{
		//non-Phong & Lambert
		hit.albedo = min(1.0f - hit.specular, hit.albedo);
		float specChance = energy(hit.specular);
		float diffChance = energy(hit.albedo);
		float sum = specChance + diffChance;
		//求解出采样全反射模型与Lambert的PDF，使用重要性采样算法采样
		specChance /= sum;
		diffChance /= sum;
		float roulette = rand();
		//由于浮点数不精确，沿法线偏移一点点距离
		ray.origin = hit.position + hit.normal * 0.001f;
		if (roulette < specChance)
		{
			float alpha = hit.smoothness;
			//在反射角周围按余弦概率采样
			ray.direction = SampleHemisphere(reflect(ray.direction, hit.normal), alpha);
			float f = (alpha + 2.0f) / (alpha + 1.0f);
			ray.energy *= (1.0f / specChance) * f * hit.specular * sdot(hit.normal, ray.direction);
		}
		else
		{
			ray.direction = SampleHemisphere(hit.normal);
			ray.energy *= (1.0f / diffChance) * 2 * hit.albedo * sdot(hit.normal, ray.direction);
		}
		return hit.emission;
	}
	else
	{
		ray.energy = float3(0.0f, 0.0f, 0.0f);
		return World::HitSkyBox(ray.direction);
	}
}

RWTexture2D<float4> Result;
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	Result.GetDimensions(Width, Height);

	World::InitWorld();
	Ray ray = CreateCameraRay(id.xy);
	SetRandomSalt(id.xy);

	float3 result = float3(0, 0, 0);
	for (int i = 0; i < 2; i++)
	{
		RayHit hit = World::Trace(ray);
		result += ray.energy * Shade(ray, hit);
		if (!any(ray.energy))
		{
			break;
		}
	}
	Result[id.xy] = float4(result, 1);
}
